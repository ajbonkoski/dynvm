lib { simple_lua }

Grammar     <- S MStatement EOI                    { lib.genFinal(...1)  }

MStatement   <- (Statement S)+                     { lib.CodeSequence.join(arg_array3(0, 0)) }
Statement    <- EStatement    /
                IfStatement   /
                WhileStatment                      {..0}

EStatement   <- Expression S (';' S)*              {..0}
IfStatement  <- 'if'   S Expression S
                'then' S MStatement S
                ElseIfStatement*
                IfEndStatement                { lib.genIfStmt(
                                                      (...2, ...6),
                                                      arg_array1(8, 0, require=10),
                                                      Nth3(SZ-1)) }

ElseIfStatement <- 'elseif' S Expression S 'then'
                            S MStatement S       {(...2, ...6)}

ElseStatement <- 'else' S MStatement S           {..2}

IfEndStatement <- ElseStatement? 'end'             { sel(..0, [None], 2) }

WhileStatment <- 'while' S Expression S 'do'
                         S MStatement S 'end'    { lib.genWhileStmt(...2, ...6) }

Expression   <- AssignExpr / BinOpExprGen          {..0}
AssignExpr   <- LValue S '=' S BinOpExprP1         { ...0.genAssign(...4) }
BinOpExprGen <- BinOpExprP1                        { ...0.ensureGen() }

BinOpExprP1 <- BinOpExprP2 (S BinOpP1 S BinOpExprP2)*
               { lib.genBinCall(...0, zip(arg_array2(1, 1, require=2),
                                          arg_array3(1, 3, require=2))) }

BinOpExprP2 <- BinOpExprP3 (S BinOpP2 S BinOpExprP3)*
               { lib.genBinCall(...0, zip(arg_array2(1, 1, require=2),
                                          arg_array3(1, 3, require=2))) }

BinOpExprP3 <- RValue (S BinOpP3 S RValue)*
               { lib.genBinCall(...0, zip(arg_array2(1, 1, require=2),
                                          arg_array3(1, 3, require=2))) }

LValue      <- Variable                            {..0}
RValue      <- Variable / Literal                  {..0}
Variable    <- MVariable / GVariable / LVariable   {..0}

SVariable   <- GVariable / LVariable               {..0}
MVariable   <- SVariable ( S '.' S Name)+          { [lib.Member(...0, arg_array2(1, 3))] }

LVariable   <- Name                                { [lib.Local.fromVar(..0)] }
GVariable   <- 'global' '.' Name                   { [lib.Global(..2)] }

Literal     <- ObjLiteral / RawLiteral             {..0}
ObjLiteral  <- '{' S '}'                           { [lib.NewObjLiteral()] }
RawLiteral  <- IntLiteral / StrLiteral             { [lib.Literal(..0)] }

IntLiteral  <- '-'? [0-9]+                         { '#'+merge() }
StrLiteral  <- '"' (!'"' .)* '"'                   { stringify(merge(1, 3)) }
Name        <- !Reserved ('_'/[a-z])+              { merge(1) }


Reserved    <- 'if' / 'then' / 'else' /
               'elseif' / 'end' / 'global' /
               'while' / 'do' /
               BinOpP1 / BinOpP2 / BinOpP3

BinOpP1     <- '<=' / '<' / '>=' / '>' /
               '!=' / '=='                         {..0}
BinOpP2     <- '+' / '-'                           {..0}
BinOpP3     <- '*' / '/'                           {..0}

EOL         <- '\r\n' / '\n' / '\r'
SR          <- (' ' / '\t' / EOL)+
S           <- (' ' / '\t' / EOL)*
