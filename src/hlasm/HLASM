----------------------------------------------------------------------
High-Level Asm (HLASM) is a bytecode designed for dynamic languages.
  * Inspired by the bytecode used in the lua5.0 implementation
----------------------------------------------------------------------

FIELD TYPES: specified with regex
----------------------------------------------------------------------
register:  r[0-9]+
string:    "[^ "]*"
integer:   #[0-9]+
sign-int:  #-?[0-9]+
literal:   string | integer
boolean:   true | false

PSEUDOCODE CONVETIONS
----------------------------------------------------------------------
R[n]    Access the set of registers with n as the index
L[n]    Access the set of local literals with n as the index
G[n]    Access the set of globals with n as the index

OPCODE(layout)      fieldA     fieldB     fieldC    |  pseudocode
----------------------------------------------------------------------
LITERAL(iABx)       register   literal              |  R[A] = L[B]
LOADGLOBAL(iABx)    register   string               |  R[A] = G[B]
STOREGLOBAL(iABx)   register   string               |  G[B] = R[A]
MOVE(iABC)          register   register             |  R[A] = R[B]
RET(iA)             register                        |  return R[A]
NEWOBJECT(iA)       register                        |  R[A] = new object()
SETSELF(iA)         register                        |  self = R[A] (required before a MEMBER ACCESS OPCODE)
GET(iABx)           register   string               |  R[A] = self.LOOKUP[B]
SET(iABx)           register   string               |  self.LOOKUP[B] = R[A]
CALL(iABC)          register   register   register  |  R[A] = CALL(R[B], R[B+1]..R[C]), C <= B means no args
TEST(iABx)          register   boolean              |  if(bool(R[A]) != Bx) PC++, skip next instruction
JMP(isBx)                     signed-int            |  PC += sBx
