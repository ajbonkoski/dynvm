module vm.jit.dispatch;

import std.conv;
import std.stdio;

import common.dynasm_util;
import hlasm.code_obj;
import hlasm.literal;
import hlasm.instructions;
import vm.dyn_obj;
import vm.state;
import vm.stack_frame;

import vm.jit.dynasm_util;

// DynASM directives.
|.arch x64
|.actionlist actions
|.section code, imports

|.macro call_extern, target
|  .imports
  |  ->__imp__..target:
  |  .dword  cast(uint)target
  |  .dword (cast(ulong)target >> 32)
|  .code
|  call qword [->__imp__..target]
|.endmacro


|.macro call_extern2, target
|  .code
|  mov  rax, target
|  call rax
|.endmacro

|.macro call_arg0, target
|  .code
|  mov  rax, target
|  call rax
|.endmacro

|.macro call_arg1, target, arg1
|  .code
|  mov  rdi, arg1
|  mov  rax, target
|  call rax
|.endmacro

|.macro call_arg2, target, arg1, arg2
|  .code
|  mov  rsi, arg1
|  mov  rdi, arg2
|  mov  rax, target
|  call rax
|.endmacro

|.macro call_arg3, target, arg1, arg2, arg3
|  .code
|  mov  rdx, arg1
|  mov  rsi, arg2
|  mov  rdi, arg3
|  mov  rax, target
|  call rax
|.endmacro

|.macro get_register, regnum, dest_reg
|  .code
|  mov  dest_reg, [r13+(regnum*8)]
|.endmacro

|.macro set_register, regnum, src_reg
|  .code
|  mov  [r13+(regnum*8)], src_reg
|.endmacro

void unimpl(IOpcode op)
{
  assert(false, "Error: opcode \""~op.to!string~"\" is unimplemented");
}

// DynObject callOpFuction(uint regB, uint regC, ref State state)
// {
//   DynObject[] args;
//   uint arg_num = regB+1;
//   uint arg_end = regC;
//   foreach(i; arg_num..arg_end+1)
//     args ~= state.getRegister(i);
//   return state.getRegister(regB).Dyn_call(args);
// }

void write_int(int i) { i.writeln; }

void jitCode(ref State state, bool silent)
{
  auto getGlobal = (&state.getGlobal).funcptr;
  auto setGlobal = (&state.setGlobal).funcptr;
  auto getRegister = (&state.frame.getRegister).funcptr;
  auto setRegister = (&state.frame.setRegister).funcptr;
  auto getLiteralObj = (&state.frame.getLiteralObj).funcptr;
  auto getLiteral = (&state.frame.getLiteral).funcptr;
  auto literal_truthiness = &Literal.truthiness;
  auto createNewObject = (){ return DynObjectBuiltin.create!("object"); };
  auto selfGet = (&state.selfGet).funcptr;
  auto selfSet = (&state.selfSet).funcptr;
  //auto callOp = &callOpFuction;

  mixin(DasmDecl("d"));
  d.init(1);
  d.setup(actions);
  int num_pclabels = state.frame.code.inst.length.to!int;
  d.growpc(num_pclabels);
  Instruction inst;

  void genBinop(string name)()
  {
    auto Dyn_binop_name = &Dyn_binop!name;
    int l1 = num_pclabels;
    int l2 = num_pclabels+1;
    num_pclabels += 2;
    d.growpc(num_pclabels);

    | get_register inst.iABC.c, r10
    | get_register inst.iABC.b, r9

    // check for unboxed ints
    | mov rax, r9
    | or  rax, r10
    | test rax, 0x1
    | jne =>l1

    // emit code for unboxed int
    static if(name == "__op_add") {
      | add r9, r10
    } else static if(name == "__op_sub") {
      | sub r9, r10
    } else static if(name == "__op_mul") {
      | sar r9,  1
      | sar r10, 1
      | mov rax, r9
      | mul r10
      | mov r9, rax
      | sal r9, 1
    } else static if(name == "__op_div") {
      | sar r9,  1
      | sar r10, 1
      | mov rax, r9
      | div r10
      | mov r9, rax
      | sal r9, 1
    } else static if(name == "__op_leq") {
      | xor rax, rax
      | mov rbx, 1
      | cmp r9, r10
      | cmovle rax, rbx
      | mov r9, rax
      | sal r9, 1
    } else static if(name == "__op_lt") {
      | xor rax, rax
      | mov rbx, 1
      | cmp r9, r10
      | cmovl rax, rbx
      | mov r9, rax
      | sal r9, 1
    } else {
      assert(0, "unimpl");
    }

    | jmp =>l2
    | =>l1:

    // emit code for object binops
    auto binop_call = &Dyn_binop!name;
    | and r9, ~1
    | and r10, ~1
    | call_arg2 binop_call, r9, r10
    | mov r9, rax
    | or r9, 1
    | =>l2:

    // emit code for object


    //state.setRegister(inst.iABC.a, obj_a);
    | set_register inst.iABC.a, r9
  }

  // r15: state (State*)
  // r14: state.frame (StackFrame*)
  // r13: state.frame.locals (DynObject[].ptr)
  | push rdi
  | mov  r15, rdi
  | mov  r14, [r15+State.frame.offsetof]
  | mov  r13, [r14+(state.frame.locals.offsetof+8)]

  bool done = false;
  uint inst_num = 0;
  while(!done) {
    // fetch the pc before it gets inc.
    auto current_pc = state.pc;
    inst = state.fetchInstr;
    auto op = inst.opcode;
    | =>(current_pc):

    // these are aliased to work-around a naming conflict with dynasm
    auto iABx_a = inst.iABx.a;
    auto iABx_bx = inst.iABx.bx;

    final switch(op)
    {
      case IOpcode.LITERAL:
        | call_arg2 getLiteralObj, iABx_bx, r14
        | set_register iABx_a, rax
        break;

      case IOpcode.LOADGLOBAL:
        | call_arg2 getGlobal, iABx_bx, r15
        | set_register iABx_a, rax
        break;

      case IOpcode.STOREGLOBAL:
        | get_register iABx_a, rax
        | call_arg3 setGlobal, iABx_bx, rax, r15
        break;

      case IOpcode.MOVE:
        | get_register inst.iAB.b, rax
        | set_register inst.iAB.a, rax
        break;

      case IOpcode.RET:
        | get_register inst.iAB.a, rax
        | mov  [r15+State._ret.offsetof], rax
        done = true; break;

      case IOpcode.NEWOBJECT:
        | call_arg0 createNewObject
        | set_register inst.iA.a, rax
        break;

      case IOpcode.SETSELF:
        | get_register inst.iAB.a, rax
        | mov  [r15+State._self.offsetof], rax
        break;

      case IOpcode.GET:
        | call_arg2 selfGet, iABx_bx, r15
        | set_register iABx_a, rax
        break;

      case IOpcode.SET:
        | get_register iABx_a, rax
        | call_arg3 selfSet, iABx_bx, rax, r15
        break;

      case IOpcode.CALL:
        // | call_arg3 callOp, inst.iABC.b, inst.iABC.c, r15
        // | set_register inst.iABC.a, rax
        assert(0, "call is unimplemented");
        break;

      case IOpcode.TEST:
        //bool t  = state.getRegister(inst.iABx.a).truthiness;
        | get_register iABx_a, rax
        | call_arg1 cast(void*)&Dyn_truthiness, rax
        | mov  rbx, rax

        //bool tl = state.getLiteral(inst.iABx.bx).truthiness;
        | sub  rsp, Literal.sizeof
        | call_arg3 getLiteral, iABx_bx, rsp, r14
        | call_arg1 literal_truthiness, rax
        | add  rsp, Literal.sizeof

        //if(t != tl) state.pc += 1;
        | cmp rax, rbx
        | jne =>(state.pc+1)
        break;

      case IOpcode.JMPTRUE:
        int offset = inst.iAsBx.sbx.sBx18_to_int;
        //bool t  = state.getRegister(inst.iABx.a).truthiness;
        | get_register iABx_a, rax
        | cmp rax, 0
        // | call_arg1 cast(void*)&Dyn_truthiness, rax
        | jnz =>(state.pc+offset)
        break;

      case IOpcode.JMPFALSE:
        int offset = inst.iAsBx.sbx.sBx18_to_int;
        //bool t  = state.getRegister(inst.iABx.a).truthiness;
        | get_register iABx_a, rax
        | cmp rax, 0
        // | call_arg1 cast(void*)&Dyn_truthiness, rax
        | jz =>(state.pc+offset)
        break;

      case IOpcode.JMP:
        int offset = inst.isBx.sbx.sBx26_to_int;
        | jmp =>(state.pc + offset)
        break;

      case IOpcode.ADD:  genBinop!"__op_add"; break;
      case IOpcode.SUB:  genBinop!"__op_sub"; break;
      case IOpcode.MUL:  genBinop!"__op_mul"; break;
      case IOpcode.DIV:  genBinop!"__op_div"; break;
      case IOpcode.LEQ:  genBinop!"__op_leq"; break;
      case IOpcode.LT:   genBinop!"__op_lt";  break;
      case IOpcode.GEQ:  genBinop!"__op_geq"; break;
      case IOpcode.GT:   genBinop!"__op_gt";  break;
      case IOpcode.EQ:   genBinop!"__op_eq";  break;
      case IOpcode.NEQ:  genBinop!"__op_neq"; break;
    }
  }

  | pop rdi
  | ret

  auto func = d.link_and_encode;
  if(!silent) { d.printDisassembly; }

  func(&state);

  d.free;
}
