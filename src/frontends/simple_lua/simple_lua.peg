lib { simple_lua }

Grammar     <- S (Statement S)+ EOI               { merge_array(1, 0) + lib.genEnd()  }

Statement    <- EStatment                          {..0}
EStatment    <- Expression S (';' S)*              {..0}

Expression   <- AssignExpr / BinOpExprGen          {..0}
AssignExpr   <- LValue S '=' S BinOpExprP1         { ...0.genAssign(...4) }
BinOpExprGen <- BinOpExprP1                        { ...0.ensureGen() }

BinOpExprP1 <- BinOpExprP2 (S BinOpP1 S BinOpExprP2)*
               { lib.genBinCall(...0, zip(arg_array2(1, 1, require=2),
                                          arg_array3(1, 3, require=2))) }

BinOpExprP2 <- RValue (S BinOpP2 S RValue)*
               { lib.genBinCall(...0, zip(arg_array2(1, 1, require=2),
                                          arg_array3(1, 3, require=2))) }

BinOpP1     <- '+' / '-'                           {..0}
BinOpP2     <- '*' / '/'                           {..0}

LValue      <- Variable                            {..0}
RValue      <- Variable / Literal                  {..0}
Variable    <- MVariable / GVariable / LVariable   {..0}

SVariable   <- GVariable / LVariable               {..0}
MVariable   <- SVariable ( S '.' S Name)+          { [lib.Member(...0, arg_array2(1, 3))] }

LVariable   <- Name                                { [lib.Local.fromVar(..0)] }
GVariable   <- 'global' '.' Name                   { [lib.Global(..2)] }

Literal     <- ObjLiteral / RawLiteral             {..0}
ObjLiteral  <- '{' S '}'                           { [lib.NewObjLiteral()] }
RawLiteral  <- IntLiteral / StrLiteral             { [lib.Literal(..0)] }

IntLiteral  <- [0-9]+                              { '#'+merge(0) }
StrLiteral  <- '"' (!'"' .)* '"'                   { stringify(merge(1, 3)) }
Name        <- [a-z]+                              { merge(0) }


EOL         <- '\r\n' / '\n' / '\r'
SR          <- (' ' / '\t' / EOL)+
S           <- (' ' / '\t' / EOL)*
