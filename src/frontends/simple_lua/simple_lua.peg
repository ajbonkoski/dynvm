lib { simple_lua }

Grammar     <- S (Expression S (';' S)* )+ EOI
               { ''.join([a[0][0] for a in arg[1]]) + \
                 lib.genEnd()  }

Expression  <- AssignExpr /
               BinOpExprEx
               { arg[0][0] }

AssignExpr  <- LValue S '=' S BinOpExprP1
               { arg[0][0][0].genAssign(arg[4][0][0]) }

BinOpExprEx <- BinOpExprP1
               { arg[0][0][0].instr }

BinOpExprP1 <- BinOpExprP2 (S BinOpP1 S BinOpExprP2)*
               { lib.genBinCall(arg[0][0][0],
                  [(a[1][0], a[3][0][0]) for a in (arg[1] if len(arg) > 1 else [])]) }

BinOpP1     <- '+' / '-'
               { arg[0][0] }

BinOpExprP2 <- BinOpExprP3 (S BinOpP2 S BinOpExprP3)*
               { lib.genBinCall(arg[0][0][0],
                  [(a[1][0], a[3][0][0]) for a in (arg[1] if len(arg) > 1 else [])]) }

BinOpP2     <- '*' / '/'
               { arg[0][0] }

BinOpExprP3 <- RValue
               { arg[0][0] }

LValue      <- Variable
               { arg[0][0] }

RValue      <- Variable / Literal
               { arg[0][0] }

Variable    <- MVariable / SVariable
               { arg[0][0] }

SVariable   <- GVariable / LVariable
               { arg[0][0] }

LVariable   <- Name
               { [lib.Local.fromVar(arg[0][0])] }

GVariable   <- 'global' SR [a-z]
               { [lib.Global(arg[2][0])] }

MVariable   <- SVariable S '.' S Name
               { [lib.Member(arg[0][0][0], arg[4][0])] }

Literal     <- ObjLiteral / RawLiteral
               { arg[0][0] }

InstLiteral <- ObjLiteral
               { arg[0][0] }

ObjLiteral  <- '{' S '}'
               { [lib.NewObjLiteral()] }

RawLiteral  <- IntLiteral / StrLiteral
               { [lib.Literal(arg[0][0])] }

IntLiteral  <- [1-9][0-9]*
               { '#' + arg[0][0] + \
                 (''.join([a[0] for a in arg[1]]) if len(arg) > 1
                 else '') }

StrLiteral  <- '"' (!'"' .)* '"'
               { '"'+''.join([a[1][0] for a in arg[1]])+'"' }

Name        <- [a-z]
               { arg[0][0] }



EOL         <- '\r\n' / '\n' / '\r'
SR          <- (' ' / '\t' / EOL)+
S           <- (' ' / '\t' / EOL)*
